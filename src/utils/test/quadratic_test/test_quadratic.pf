module test_quadratic

  ! Tests of quadratic

  use pfunit_mod
  use quadraticMod
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestQuadratic
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestQuadratic

  real(r8), parameter :: tol = 1.e-15_r8

contains

  subroutine setUp(this)
    class(TestQuadratic), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestQuadratic), intent(inout) :: this

  end subroutine tearDown

  subroutine check_root(a,b,c,root)
     real(r8), intent(IN):: a, b, c, root
     real(r8) :: result

     result = a*root*root + b*root + c
     @AssertEqual( result, 0.0_r8, tolerance=tol)
     
  end subroutine check_root

  ! ------------------------------------------------------------------------
  ! Tests of zero roots
  ! ------------------------------------------------------------------------

  @Test
  subroutine zero_root(this)
    class(TestQuadratic), intent(inout) :: this
    real(r8) :: b, c, r1, r2
    real(r8) :: a(3)
    integer :: i
    
    a = (/ 1000.0_r8, 5.12345678_r8, -31.415927465859_r8 /)
    b = 0.0_r8
    c = 0.0_r8
    do i = 1, size(a)
       call quadratic (a(i), b, c, r1, r2)
       call check_root(a(i), b, c, r1)
       @assertEqual(0.0_r8,    r1, tolerance=tol)
       @assertEqual(1.e+36_r8, r2, tolerance=tol)
    end do

  end subroutine zero_root

  ! ------------------------------------------------------------------------
  ! Tests of simple  roots
  ! ------------------------------------------------------------------------

  @Test
  subroutine simple_roots(this)
    class(TestQuadratic), intent(inout) :: this
    real(r8) :: r1, r2
    real(r8) :: a(2), b(2), c(2)
    real(r8) :: expectedr1(2), expectedr2(2)
    integer :: i
    
    a = (/ 1.0_r8,  1.0_r8 /)
    b = (/ 3.0_r8,  0.0_r8 /)
    c = (/ 2.0_r8, -4.0_r8 /)
    expectedr1 = (/ -2.0_r8, -2.0_r8 /)
    expectedr2 = (/ -1.0_r8, +2.0_r8 /)
    do i = 1, size(a)
       print *, "i:", i
       print *, "coeffs:", a(i), b(i), c(i)
       call quadratic (a(i), b(i), c(i), r1, r2)
       print *, "roots:", r1, r2
       call check_root(a(i), b(i), c(i), r1)
       call check_root(a(i), b(i), c(i), r2)
       @assertEqual(expectedr1(i), r1, tolerance=tol)
       @assertEqual(expectedr2(i), r2, tolerance=tol)
    end do

  end subroutine simple_roots

end module test_quadratic
